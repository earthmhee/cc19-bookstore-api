// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String?
  lastName    String?
  username    String   @unique
  password    String   @default("123456")
  email       String?  @unique
  age         Int?
  address     String?
  phoneNumber String?
  urlImage    String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt

  Cart   Cart?
  Orders Order[]
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)

  CartItems CartItem[]
  @@map("carts")
}

model CartItem {
  id       Int  @id @default(autoincrement())
  book     Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   Int
  cart     Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId   Int
  quantity Int
  @@map("cartitems")
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  orderDate DateTime
  status    String

  OrderItems OrderItem[]
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  quantity  Int
  price     Float
  @@map("orderitems")
}

model Book {
  id          Int       @id @default(autoincrement())
  publisher   Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publisherId Int
  title       String    @unique
  author      String    @default("Unknown")
  description String?
  stock       Int       @default(0)
  genre       String    @default("Unknown")
  price       Float     @default(0)
  urlImage    String?
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt

  CartItems  CartItem[]
  OrderItems OrderItem[]
  @@map("books")
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  address String?
  contact String?

  Books Book[]
  @@map("publishers")
}
